from tabulate import tabulate
import io

def create_matrix(map_dict, row_intervals, col_intervals):
    num_rows = len(row_intervals)
    num_cols = len(col_intervals)

    # Create the matrix and fill it with empty strings
    matrix = [["" for _ in range(num_cols)] for _ in range(num_rows)]

    # Fill the matrix with the values from the dictionary
    for key, value in map_dict.items():
        # Find the row index that contains the value
        row_idx = None
        for i in range(num_rows):
            if row_intervals[i] <= value[0] < row_intervals[i+1]:
                row_idx = i
                break
        if row_idx is not None:
            # Find the column index that contains the value
            col_idx = col_intervals.index(value[1])
            if matrix[row_idx][col_idx] == "":
                matrix[row_idx][col_idx] = key
            else:
                matrix[row_idx][col_idx] += f", {key}"

    # Add the row and column headers
    row_headers = [str(row_interval) for row_interval in row_intervals]
    col_headers = [str(col_interval) for col_interval in col_intervals]
    matrix.insert(0, col_headers)
    for i in range(1, num_rows+1):
        matrix[i].insert(0, row_headers[i-1])

    # Return the matrix as a formatted table
    return tabulate(matrix, headers="firstrow", tablefmt="github", floatfmt=".1f")

 
map_dict3 =  {'#1: 2⁺,2⁻,1⁺': (0.5, 5), '#2: 2⁺,2⁻,1⁻': (-0.5, 5), '#3: 2⁺,2⁻,0⁺': (0.5, 4), '#4: 2⁺,2⁻,0⁻': (-0.5, 4), '#5: 2⁺,2⁻,-1⁺': (0.5, 3), '#6: 2⁺,2⁻,-1⁻': (-0.5, 3), '#7: 2⁺,2⁻,-2⁺': (0.5, 2), '#8: 2⁺,2⁻,-2⁻': (-0.5, 2), '#9: 2⁺,1⁺,1⁻': (0.5, 4), '#10: 2⁺,1⁺,0⁺': (1.5, 3), '#11: 2⁺,1⁺,0⁻': (0.5, 3), '#12: 2⁺,1⁺,-1⁺': (1.5, 2), '#13: 2⁺,1⁺,-1⁻': (0.5, 2), '#14: 2⁺,1⁺,-2⁺': (1.5, 1), '#15: 2⁺,1⁺,-2⁻': (0.5, 1), '#16: 2⁺,1⁻,0⁺': (0.5, 3), '#17: 2⁺,1⁻,0⁻': (-0.5, 3), '#18: 2⁺,1⁻,-1⁺': (0.5, 2), '#19: 2⁺,1⁻,-1⁻': (-0.5, 2), '#20: 2⁺,1⁻,-2⁺': (0.5, 1), '#21: 2⁺,1⁻,-2⁻': (-0.5, 1), '#22: 2⁺,0⁺,0⁻': (0.5, 2), '#23: 2⁺,0⁺,-1⁺': (1.5, 1), '#24: 2⁺,0⁺,-1⁻': (0.5, 1), '#25: 2⁺,0⁺,-2⁺': (1.5, 0), '#26: 2⁺,0⁺,-2⁻': (0.5, 0), '#27: 2⁺,0⁻,-1⁺': (0.5, 1), '#28: 2⁺,0⁻,-1⁻': (-0.5, 1), '#29: 2⁺,0⁻,-2⁺': (0.5, 0), '#30: 2⁺,0⁻,-2⁻': (-0.5, 0), '#31: 2⁺,-1⁺,-1⁻': (0.5, 0), '#32: 2⁺,-1⁺,-2⁺': (1.5, -1), '#33: 2⁺,-1⁺,-2⁻': (0.5, -1), '#34: 2⁺,-1⁻,-2⁺': (0.5, -1), '#35: 2⁺,-1⁻,-2⁻': (-0.5, -1), '#36: 2⁺,-2⁺,-2⁻': (0.5, -2), '#37: 2⁻,1⁺,1⁻': (-0.5, 4), '#38: 2⁻,1⁺,0⁺': (0.5, 3), '#39: 2⁻,1⁺,0⁻': (-0.5, 3), '#40: 2⁻,1⁺,-1⁺': (0.5, 2), '#41: 2⁻,1⁺,-1⁻': (-0.5, 2), '#42: 2⁻,1⁺,-2⁺': (0.5, 1), '#43: 2⁻,1⁺,-2⁻': (-0.5, 1), '#44: 2⁻,1⁻,0⁺': (-0.5, 3), '#45: 2⁻,1⁻,0⁻': (-1.5, 3), '#46: 2⁻,1⁻,-1⁺': (-0.5, 2), '#47: 2⁻,1⁻,-1⁻': (-1.5, 2), '#48: 2⁻,1⁻,-2⁺': (-0.5, 1), '#49: 2⁻,1⁻,-2⁻': (-1.5, 1), '#50: 2⁻,0⁺,0⁻': (-0.5, 2), '#51: 2⁻,0⁺,-1⁺': (0.5, 1), '#52: 2⁻,0⁺,-1⁻': (-0.5, 1), '#53: 2⁻,0⁺,-2⁺': (0.5, 0), '#54: 2⁻,0⁺,-2⁻': (-0.5, 0), '#55: 2⁻,0⁻,-1⁺': (-0.5, 1), '#56: 2⁻,0⁻,-1⁻': (-1.5, 1), '#57: 2⁻,0⁻,-2⁺': (-0.5, 0), '#58: 2⁻,0⁻,-2⁻': (-1.5, 0), '#59: 2⁻,-1⁺,-1⁻': (-0.5, 0), '#60: 2⁻,-1⁺,-2⁺': (0.5, -1), '#61: 2⁻,-1⁺,-2⁻': (-0.5, -1), '#62: 2⁻,-1⁻,-2⁺': (-0.5, -1), '#63: 2⁻,-1⁻,-2⁻': (-1.5, -1), '#64: 2⁻,-2⁺,-2⁻': (-0.5, -2), '#65: 1⁺,1⁻,0⁺': (0.5, 2), '#66: 1⁺,1⁻,0⁻': (-0.5, 2), '#67: 1⁺,1⁻,-1⁺': (0.5, 1), '#68: 1⁺,1⁻,-1⁻': (-0.5, 1), '#69: 1⁺,1⁻,-2⁺': (0.5, 0), '#70: 1⁺,1⁻,-2⁻': (-0.5, 0), '#71: 1⁺,0⁺,0⁻': (0.5, 1), '#72: 1⁺,0⁺,-1⁺': (1.5, 0), '#73: 1⁺,0⁺,-1⁻': (0.5, 0), '#74: 1⁺,0⁺,-2⁺': (1.5, -1), '#75: 1⁺,0⁺,-2⁻': (0.5, -1), '#76: 1⁺,0⁻,-1⁺': (0.5, 0), '#77: 1⁺,0⁻,-1⁻': (-0.5, 0), '#78: 1⁺,0⁻,-2⁺': (0.5, -1), '#79: 1⁺,0⁻,-2⁻': (-0.5, -1), '#80: 1⁺,-1⁺,-1⁻': (0.5, -1), '#81: 1⁺,-1⁺,-2⁺': (1.5, -2), '#82: 1⁺,-1⁺,-2⁻': (0.5, -2), '#83: 1⁺,-1⁻,-2⁺': (0.5, -2), '#84: 1⁺,-1⁻,-2⁻': (-0.5, -2), '#85: 1⁺,-2⁺,-2⁻': (0.5, -3), '#86: 1⁻,0⁺,0⁻': (-0.5, 1), '#87: 1⁻,0⁺,-1⁺': (0.5, 0), '#88: 1⁻,0⁺,-1⁻': (-0.5, 0), '#89: 1⁻,0⁺,-2⁺': (0.5, -1), '#90: 1⁻,0⁺,-2⁻': (-0.5, -1), '#91: 1⁻,0⁻,-1⁺': (-0.5, 0), '#92: 1⁻,0⁻,-1⁻': (-1.5, 0), '#93: 1⁻,0⁻,-2⁺': (-0.5, -1), '#94: 1⁻,0⁻,-2⁻': (-1.5, -1), '#95: 1⁻,-1⁺,-1⁻': (-0.5, -1), '#96: 1⁻,-1⁺,-2⁺': (0.5, -2), '#97: 1⁻,-1⁺,-2⁻': (-0.5, -2), '#98: 1⁻,-1⁻,-2⁺': (-0.5, -2), '#99: 1⁻,-1⁻,-2⁻': (-1.5, -2), '#100: 1⁻,-2⁺,-2⁻': (-0.5, -3), '#101: 0⁺,0⁻,-1⁺': (0.5, -1), '#102: 0⁺,0⁻,-1⁻': (-0.5, -1), '#103: 0⁺,0⁻,-2⁺': (0.5, -2), '#104: 0⁺,0⁻,-2⁻': (-0.5, -2), '#105: 0⁺,-1⁺,-1⁻': (0.5, -2), '#106: 0⁺,-1⁺,-2⁺': (1.5, -3), '#107: 0⁺,-1⁺,-2⁻': (0.5, -3), '#108: 0⁺,-1⁻,-2⁺': (0.5, -3), '#109: 0⁺,-1⁻,-2⁻': (-0.5, -3), '#110: 0⁺,-2⁺,-2⁻': (0.5, -4), '#111: 0⁻,-1⁺,-1⁻': (-0.5, -2), '#112: 0⁻,-1⁺,-2⁺': (0.5, -3), '#113: 0⁻,-1⁺,-2⁻': (-0.5, -3), '#114: 0⁻,-1⁻,-2⁺': (-0.5, -3), '#115: 0⁻,-1⁻,-2⁻': (-1.5, -3), '#116: 0⁻,-2⁺,-2⁻': (-0.5, -4), '#117: -1⁺,-1⁻,-2⁺': (0.5, -4), '#118: -1⁺,-1⁻,-2⁻': (-0.5, -4), '#119: -1⁺,-2⁺,-2⁻': (0.5, -5), '#120: -1⁻,-2⁺,-2⁻': (-0.5, -5)}

map_dict4=  {'C:1: 2⁺,2⁻,1⁺,1⁻': (0.0, 6), 'C:2: 2⁺,2⁻,1⁺,0⁺': (1.0, 5), 'C:3: 2⁺,2⁻,1⁺,0⁻': (0.0, 5), 'C:4: 2⁺,2⁻,1⁺,-1⁺': (1.0, 4), 'C:5: 2⁺,2⁻,1⁺,-1⁻': (0.0, 4), 'C:6: 2⁺,2⁻,1⁺,-2⁺': (1.0, 3), 'C:7: 2⁺,2⁻,1⁺,-2⁻': (0.0, 3), 'C:8: 2⁺,2⁻,1⁻,0⁺': (0.0, 5), 'C:9: 2⁺,2⁻,1⁻,0⁻': (-1.0, 5), 'C:10: 2⁺,2⁻,1⁻,-1⁺': (0.0, 4), 'C:11: 2⁺,2⁻,1⁻,-1⁻': (-1.0, 4), 'C:12: 2⁺,2⁻,1⁻,-2⁺': (0.0, 3), 'C:13: 2⁺,2⁻,1⁻,-2⁻': (-1.0, 3), 'C:14: 2⁺,2⁻,0⁺,0⁻': (0.0, 4), 'C:15: 2⁺,2⁻,0⁺,-1⁺': (1.0, 3), 'C:16: 2⁺,2⁻,0⁺,-1⁻': (0.0, 3), 'C:17: 2⁺,2⁻,0⁺,-2⁺': (1.0, 2), 'C:18: 2⁺,2⁻,0⁺,-2⁻': (0.0, 2), 'C:19: 2⁺,2⁻,0⁻,-1⁺': (0.0, 3), 'C:20: 2⁺,2⁻,0⁻,-1⁻': (-1.0, 3), 'C:21: 2⁺,2⁻,0⁻,-2⁺': (0.0, 2), 'C:22: 2⁺,2⁻,0⁻,-2⁻': (-1.0, 2), 'C:23: 2⁺,2⁻,-1⁺,-1⁻': (0.0, 2), 'C:24: 2⁺,2⁻,-1⁺,-2⁺': (1.0, 1), 'C:25: 2⁺,2⁻,-1⁺,-2⁻': (0.0, 1), 'C:26: 2⁺,2⁻,-1⁻,-2⁺': (0.0, 1), 'C:27: 2⁺,2⁻,-1⁻,-2⁻': (-1.0, 1), 'C:28: 2⁺,2⁻,-2⁺,-2⁻': (0.0, 0), 'C:29: 2⁺,1⁺,1⁻,0⁺': (1.0, 4), 'C:30: 2⁺,1⁺,1⁻,0⁻': (0.0, 4), 'C:31: 2⁺,1⁺,1⁻,-1⁺': (1.0, 3), 'C:32: 2⁺,1⁺,1⁻,-1⁻': (0.0, 3), 'C:33: 2⁺,1⁺,1⁻,-2⁺': (1.0, 2), 'C:34: 2⁺,1⁺,1⁻,-2⁻': (0.0, 2), 'C:35: 2⁺,1⁺,0⁺,0⁻': (1.0, 3), 'C:36: 2⁺,1⁺,0⁺,-1⁺': (2.0, 2), 'C:37: 2⁺,1⁺,0⁺,-1⁻': (1.0, 2), 'C:38: 2⁺,1⁺,0⁺,-2⁺': (2.0, 1), 'C:39: 2⁺,1⁺,0⁺,-2⁻': (1.0, 1), 'C:40: 2⁺,1⁺,0⁻,-1⁺': (1.0, 2), 'C:41: 2⁺,1⁺,0⁻,-1⁻': (0.0, 2), 'C:42: 2⁺,1⁺,0⁻,-2⁺': (1.0, 1), 'C:43: 2⁺,1⁺,0⁻,-2⁻': (0.0, 1), 'C:44: 2⁺,1⁺,-1⁺,-1⁻': (1.0, 1), 'C:45: 2⁺,1⁺,-1⁺,-2⁺': (2.0, 0), 'C:46: 2⁺,1⁺,-1⁺,-2⁻': (1.0, 0), 'C:47: 2⁺,1⁺,-1⁻,-2⁺': (1.0, 0), 'C:48: 2⁺,1⁺,-1⁻,-2⁻': (0.0, 0), 'C:49: 2⁺,1⁺,-2⁺,-2⁻': (1.0, -1), 'C:50: 2⁺,1⁻,0⁺,0⁻': (0.0, 3), 'C:51: 2⁺,1⁻,0⁺,-1⁺': (1.0, 2), 'C:52: 2⁺,1⁻,0⁺,-1⁻': (0.0, 2), 'C:53: 2⁺,1⁻,0⁺,-2⁺': (1.0, 1), 'C:54: 2⁺,1⁻,0⁺,-2⁻': (0.0, 1), 'C:55: 2⁺,1⁻,0⁻,-1⁺': (0.0, 2), 'C:56: 2⁺,1⁻,0⁻,-1⁻': (-1.0, 2), 'C:57: 2⁺,1⁻,0⁻,-2⁺': (0.0, 1), 'C:58: 2⁺,1⁻,0⁻,-2⁻': (-1.0, 1), 'C:59: 2⁺,1⁻,-1⁺,-1⁻': (0.0, 1), 'C:60: 2⁺,1⁻,-1⁺,-2⁺': (1.0, 0), 'C:61: 2⁺,1⁻,-1⁺,-2⁻': (0.0, 0), 'C:62: 2⁺,1⁻,-1⁻,-2⁺': (0.0, 0), 'C:63: 2⁺,1⁻,-1⁻,-2⁻': (-1.0, 0), 'C:64: 2⁺,1⁻,-2⁺,-2⁻': (0.0, -1), 'C:65: 2⁺,0⁺,0⁻,-1⁺': (1.0, 1), 'C:66: 2⁺,0⁺,0⁻,-1⁻': (0.0, 1), 'C:67: 2⁺,0⁺,0⁻,-2⁺': (1.0, 0), 'C:68: 2⁺,0⁺,0⁻,-2⁻': (0.0, 0), 'C:69: 2⁺,0⁺,-1⁺,-1⁻': (1.0, 0), 'C:70: 2⁺,0⁺,-1⁺,-2⁺': (2.0, -1), 'C:71: 2⁺,0⁺,-1⁺,-2⁻': (1.0, -1), 'C:72: 2⁺,0⁺,-1⁻,-2⁺': (1.0, -1), 'C:73: 2⁺,0⁺,-1⁻,-2⁻': (0.0, -1), 'C:74: 2⁺,0⁺,-2⁺,-2⁻': (1.0, -2), 'C:75: 2⁺,0⁻,-1⁺,-1⁻': (0.0, 0), 'C:76: 2⁺,0⁻,-1⁺,-2⁺': (1.0, -1), 'C:77: 2⁺,0⁻,-1⁺,-2⁻': (0.0, -1), 'C:78: 2⁺,0⁻,-1⁻,-2⁺': (0.0, -1), 'C:79: 2⁺,0⁻,-1⁻,-2⁻': (-1.0, -1), 'C:80: 2⁺,0⁻,-2⁺,-2⁻': (0.0, -2), 'C:81: 2⁺,-1⁺,-1⁻,-2⁺': (1.0, -2), 'C:82: 2⁺,-1⁺,-1⁻,-2⁻': (0.0, -2), 'C:83: 2⁺,-1⁺,-2⁺,-2⁻': (1.0, -3), 'C:84: 2⁺,-1⁻,-2⁺,-2⁻': (0.0, -3), 'C:85: 2⁻,1⁺,1⁻,0⁺': (0.0, 4), 'C:86: 2⁻,1⁺,1⁻,0⁻': (-1.0, 4), 'C:87: 2⁻,1⁺,1⁻,-1⁺': (0.0, 3), 'C:88: 2⁻,1⁺,1⁻,-1⁻': (-1.0, 3), 'C:89: 2⁻,1⁺,1⁻,-2⁺': (0.0, 2), 'C:90: 2⁻,1⁺,1⁻,-2⁻': (-1.0, 2), 'C:91: 2⁻,1⁺,0⁺,0⁻': (0.0, 3), 'C:92: 2⁻,1⁺,0⁺,-1⁺': (1.0, 2), 'C:93: 2⁻,1⁺,0⁺,-1⁻': (0.0, 2), 'C:94: 2⁻,1⁺,0⁺,-2⁺': (1.0, 1), 'C:95: 2⁻,1⁺,0⁺,-2⁻': (0.0, 1), 'C:96: 2⁻,1⁺,0⁻,-1⁺': (0.0, 2), 'C:97: 2⁻,1⁺,0⁻,-1⁻': (-1.0, 2), 'C:98: 2⁻,1⁺,0⁻,-2⁺': (0.0, 1), 'C:99: 2⁻,1⁺,0⁻,-2⁻': (-1.0, 1), 'C:100: 2⁻,1⁺,-1⁺,-1⁻': (0.0, 1), 'C:101: 2⁻,1⁺,-1⁺,-2⁺': (1.0, 0), 'C:102: 2⁻,1⁺,-1⁺,-2⁻': (0.0, 0), 'C:103: 2⁻,1⁺,-1⁻,-2⁺': (0.0, 0), 'C:104: 2⁻,1⁺,-1⁻,-2⁻': (-1.0, 0), 'C:105: 2⁻,1⁺,-2⁺,-2⁻': (0.0, -1), 'C:106: 2⁻,1⁻,0⁺,0⁻': (-1.0, 3), 'C:107: 2⁻,1⁻,0⁺,-1⁺': (0.0, 2), 'C:108: 2⁻,1⁻,0⁺,-1⁻': (-1.0, 2), 'C:109: 2⁻,1⁻,0⁺,-2⁺': (0.0, 1), 'C:110: 2⁻,1⁻,0⁺,-2⁻': (-1.0, 1), 'C:111: 2⁻,1⁻,0⁻,-1⁺': (-1.0, 2), 'C:112: 2⁻,1⁻,0⁻,-1⁻': (-2.0, 2), 'C:113: 2⁻,1⁻,0⁻,-2⁺': (-1.0, 1), 'C:114: 2⁻,1⁻,0⁻,-2⁻': (-2.0, 1), 'C:115: 2⁻,1⁻,-1⁺,-1⁻': (-1.0, 1), 'C:116: 2⁻,1⁻,-1⁺,-2⁺': (0.0, 0), 'C:117: 2⁻,1⁻,-1⁺,-2⁻': (-1.0, 0), 'C:118: 2⁻,1⁻,-1⁻,-2⁺': (-1.0, 0), 'C:119: 2⁻,1⁻,-1⁻,-2⁻': (-2.0, 0), 'C:120: 2⁻,1⁻,-2⁺,-2⁻': (-1.0, -1), 'C:121: 2⁻,0⁺,0⁻,-1⁺': (0.0, 1), 'C:122: 2⁻,0⁺,0⁻,-1⁻': (-1.0, 1), 'C:123: 2⁻,0⁺,0⁻,-2⁺': (0.0, 0), 'C:124: 2⁻,0⁺,0⁻,-2⁻': (-1.0, 0), 'C:125: 2⁻,0⁺,-1⁺,-1⁻': (0.0, 0), 'C:126: 2⁻,0⁺,-1⁺,-2⁺': (1.0, -1), 'C:127: 2⁻,0⁺,-1⁺,-2⁻': (0.0, -1), 'C:128: 2⁻,0⁺,-1⁻,-2⁺': (0.0, -1), 'C:129: 2⁻,0⁺,-1⁻,-2⁻': (-1.0, -1), 'C:130: 2⁻,0⁺,-2⁺,-2⁻': (0.0, -2), 'C:131: 2⁻,0⁻,-1⁺,-1⁻': (-1.0, 0), 'C:132: 2⁻,0⁻,-1⁺,-2⁺': (0.0, -1), 'C:133: 2⁻,0⁻,-1⁺,-2⁻': (-1.0, -1), 'C:134: 2⁻,0⁻,-1⁻,-2⁺': (-1.0, -1), 'C:135: 2⁻,0⁻,-1⁻,-2⁻': (-2.0, -1), 'C:136: 2⁻,0⁻,-2⁺,-2⁻': (-1.0, -2), 'C:137: 2⁻,-1⁺,-1⁻,-2⁺': (0.0, -2), 'C:138: 2⁻,-1⁺,-1⁻,-2⁻': (-1.0, -2), 'C:139: 2⁻,-1⁺,-2⁺,-2⁻': (0.0, -3), 'C:140: 2⁻,-1⁻,-2⁺,-2⁻': (-1.0, -3), 'C:141: 1⁺,1⁻,0⁺,0⁻': (0.0, 2), 'C:142: 1⁺,1⁻,0⁺,-1⁺': (1.0, 1), 'C:143: 1⁺,1⁻,0⁺,-1⁻': (0.0, 1), 'C:144: 1⁺,1⁻,0⁺,-2⁺': (1.0, 0), 'C:145: 1⁺,1⁻,0⁺,-2⁻': (0.0, 0), 'C:146: 1⁺,1⁻,0⁻,-1⁺': (0.0, 1), 'C:147: 1⁺,1⁻,0⁻,-1⁻': (-1.0, 1), 'C:148: 1⁺,1⁻,0⁻,-2⁺': (0.0, 0), 'C:149: 1⁺,1⁻,0⁻,-2⁻': (-1.0, 0), 'C:150: 1⁺,1⁻,-1⁺,-1⁻': (0.0, 0), 'C:151: 1⁺,1⁻,-1⁺,-2⁺': (1.0, -1), 'C:152: 1⁺,1⁻,-1⁺,-2⁻': (0.0, -1), 'C:153: 1⁺,1⁻,-1⁻,-2⁺': (0.0, -1), 'C:154: 1⁺,1⁻,-1⁻,-2⁻': (-1.0, -1), 'C:155: 1⁺,1⁻,-2⁺,-2⁻': (0.0, -2), 'C:156: 1⁺,0⁺,0⁻,-1⁺': (1.0, 0), 'C:157: 1⁺,0⁺,0⁻,-1⁻': (0.0, 0), 'C:158: 1⁺,0⁺,0⁻,-2⁺': (1.0, -1), 'C:159: 1⁺,0⁺,0⁻,-2⁻': (0.0, -1), 'C:160: 1⁺,0⁺,-1⁺,-1⁻': (1.0, -1), 'C:161: 1⁺,0⁺,-1⁺,-2⁺': (2.0, -2), 'C:162: 1⁺,0⁺,-1⁺,-2⁻': (1.0, -2), 'C:163: 1⁺,0⁺,-1⁻,-2⁺': (1.0, -2), 'C:164: 1⁺,0⁺,-1⁻,-2⁻': (0.0, -2), 'C:165: 1⁺,0⁺,-2⁺,-2⁻': (1.0, -3), 'C:166: 1⁺,0⁻,-1⁺,-1⁻': (0.0, -1), 'C:167: 1⁺,0⁻,-1⁺,-2⁺': (1.0, -2), 'C:168: 1⁺,0⁻,-1⁺,-2⁻': (0.0, -2), 'C:169: 1⁺,0⁻,-1⁻,-2⁺': (0.0, -2), 'C:170: 1⁺,0⁻,-1⁻,-2⁻': (-1.0, -2), 'C:171: 1⁺,0⁻,-2⁺,-2⁻': (0.0, -3), 'C:172: 1⁺,-1⁺,-1⁻,-2⁺': (1.0, -3), 'C:173: 1⁺,-1⁺,-1⁻,-2⁻': (0.0, -3), 'C:174: 1⁺,-1⁺,-2⁺,-2⁻': (1.0, -4), 'C:175: 1⁺,-1⁻,-2⁺,-2⁻': (0.0, -4), 'C:176: 1⁻,0⁺,0⁻,-1⁺': (0.0, 0), 'C:177: 1⁻,0⁺,0⁻,-1⁻': (-1.0, 0), 'C:178: 1⁻,0⁺,0⁻,-2⁺': (0.0, -1), 'C:179: 1⁻,0⁺,0⁻,-2⁻': (-1.0, -1), 'C:180: 1⁻,0⁺,-1⁺,-1⁻': (0.0, -1), 'C:181: 1⁻,0⁺,-1⁺,-2⁺': (1.0, -2), 'C:182: 1⁻,0⁺,-1⁺,-2⁻': (0.0, -2), 'C:183: 1⁻,0⁺,-1⁻,-2⁺': (0.0, -2), 'C:184: 1⁻,0⁺,-1⁻,-2⁻': (-1.0, -2), 'C:185: 1⁻,0⁺,-2⁺,-2⁻': (0.0, -3), 'C:186: 1⁻,0⁻,-1⁺,-1⁻': (-1.0, -1), 'C:187: 1⁻,0⁻,-1⁺,-2⁺': (0.0, -2), 'C:188: 1⁻,0⁻,-1⁺,-2⁻': (-1.0, -2), 'C:189: 1⁻,0⁻,-1⁻,-2⁺': (-1.0, -2), 'C:190: 1⁻,0⁻,-1⁻,-2⁻': (-2.0, -2), 'C:191: 1⁻,0⁻,-2⁺,-2⁻': (-1.0, -3), 'C:192: 1⁻,-1⁺,-1⁻,-2⁺': (0.0, -3), 'C:193: 1⁻,-1⁺,-1⁻,-2⁻': (-1.0, -3), 'C:194: 1⁻,-1⁺,-2⁺,-2⁻': (0.0, -4), 'C:195: 1⁻,-1⁻,-2⁺,-2⁻': (-1.0, -4), 'C:196: 0⁺,0⁻,-1⁺,-1⁻': (0.0, -2), 'C:197: 0⁺,0⁻,-1⁺,-2⁺': (1.0, -3), 'C:198: 0⁺,0⁻,-1⁺,-2⁻': (0.0, -3), 'C:199: 0⁺,0⁻,-1⁻,-2⁺': (0.0, -3), 'C:200: 0⁺,0⁻,-1⁻,-2⁻': (-1.0, -3), 'C:201: 0⁺,0⁻,-2⁺,-2⁻': (0.0, -4), 'C:202: 0⁺,-1⁺,-1⁻,-2⁺': (1.0, -4), 'C:203: 0⁺,-1⁺,-1⁻,-2⁻': (0.0, -4), 'C:204: 0⁺,-1⁺,-2⁺,-2⁻': (1.0, -5), 'C:205: 0⁺,-1⁻,-2⁺,-2⁻': (0.0, -5), 'C:206: 0⁻,-1⁺,-1⁻,-2⁺': (0.0, -4), 'C:207: 0⁻,-1⁺,-1⁻,-2⁻': (-1.0, -4), 'C:208: 0⁻,-1⁺,-2⁺,-2⁻': (0.0, -5), 'C:209: 0⁻,-1⁻,-2⁺,-2⁻': (-1.0, -5), 'C:210: -1⁺,-1⁻,-2⁺,-2⁻': (0.0, -6)}
row_intervals = list(range(-15, 16, 5)) # changed range to include 15, and step to 5
row_intervals = [float(val) for val in row_intervals] # convert integers to floats
col_intervals = list(range(-5,6))

 


matrix = create_matrix(map_dict3, row_intervals, col_intervals)
print(matrix)

 
with io.open('output.txt', 'w', encoding='utf-8') as f:
    f.write(matrix)

# Print a message to confirm that the file was saved
print("Output saved to output.txt")
 